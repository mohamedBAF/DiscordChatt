{"version":3,"sources":["logo.svg","features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","Sidebar.js","ChatHeader.js","Message.js","ChatBottom.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectuser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","prompt","add","fontSize","Avatar","signOut","src","photo","displayName","uid","substring","ChatHeader","console","log","type","placeholder","Message","timestamp","message","Date","toDate","toUTCString","ChatBottom","input","setinput","useRef","onChange","e","target","value","disabled","preventDefault","FieldValue","serverTimestamp","Chat","messages","setmessages","theme","localStorage","getItem","getStorageTheme","setTheme","messagesEndRef","document","documentElement","setItem","orderBy","current","scrollIntoView","behavior","IconButton","style","backgroundColor","reverse","ref","Login","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f1ffaa5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.db36153e.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const appSlice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        channelId: null,\r\n        channelName: null,\r\n    },\r\n    reducers: {\r\n        setChannelInfo: (state, action) => {\r\n            state.channelId = action.payload.channelId;\r\n            state.channelName = action.payload.channelName;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport {  setChannelInfo } from './features/appSlice'\r\nimport './SidebarChannel.css'\r\nfunction SidebarChannel({id,channelName}) {\r\n\r\n    const dispatch = useDispatch()\r\n    return (\r\n        \r\n        <div className=\"SidebarChannel\" onClick={()=> dispatch(setChannelInfo({\r\n            channelId:id,\r\n            channelName:channelName\r\n        }))}>\r\n            <h4>\r\n            <span className=\"sidebarChannel_hash\">#</span>\r\n            {channelName}    \r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state,action) => {\r\n      \r\n      state.user = action.payload;\r\n    },\r\n    logout:(state)=>{\r\n      state.user=null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\n\r\nexport const selectuser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBxHv_fEruzpWVjaJzvF4v1ZmBUxMkrxeI\",\r\n    authDomain: \"discord-efe1b.firebaseapp.com\",\r\n    projectId: \"discord-efe1b\",\r\n    storageBucket: \"discord-efe1b.appspot.com\",\r\n    messagingSenderId: \"212926813100\",\r\n    appId: \"1:212926813100:web:744e3d37a2e55893906009\",\r\n    measurementId: \"G-7H39T45D5Q\"\r\n  };\r\n\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {auth,provider}\r\n\r\n  export default db;","import React, { useEffect,useState } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport  AddIcon  from \"@material-ui/icons/Add\";\r\nimport SidebarChannel from \"./SidebarChannel\";\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\r\nimport CallIcon from '@material-ui/icons/Call'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport HeadsetIcon from '@material-ui/icons/Headset'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectuser } from \"./features/userSlice\";\r\nimport db, { auth } from \"./firebase\";\r\n\r\nfunction Sidebar() {\r\n  const user=useSelector(selectuser);\r\n  const [channels, setChannels] = useState([]);\r\n  useEffect(() => {\r\n    db.collection(\"channels\").onSnapshot((snapshot)=>\r\n      setChannels(\r\n        snapshot.docs.map((doc)=>({\r\n          id:doc.id,\r\n          channel:doc.data(),\r\n        }))\r\n      )\r\n    );\r\n    \r\n  }, [])\r\n\r\n\r\n  const handleAddChannel=()=>{\r\n    const channelName=prompt(\"Enter a new channel name\")\r\n  if(channelName){\r\n    db.collection('channels').add({\r\n      channelName:channelName,\r\n    })\r\n  }\r\n  }\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__top\">\r\n        <h3>clever programmers</h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n      <div className=\"sidebar__channels\">\r\n        <div className=\"sidebar_channelHeader\">\r\n          <div className=\"sidebar_header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channel</h4>\r\n          </div>\r\n<AddIcon onClick={handleAddChannel} className=\"sidebar_addChannel\"/>\r\n\r\n        </div>\r\n        <div className=\"sidebarChannelliste\">\r\n\r\n        {channels.map(({id, channel})=>(\r\n         \r\n <SidebarChannel key={id} id={id} channelName={channel.channelName}/>\r\n       \r\n            \r\n ))}\r\n         \r\n</div>\r\n\r\n      </div>\r\n<div className=\"sidebarVoice\">\r\n    <SignalCellularAltIcon\r\n    className=\"sidebar__voiceicon\"\r\n    fontSize=\"large\"\r\n    />\r\n    <div className=\"sidebarvoiceInfo\">\r\n        <h3>Voice Connected</h3>\r\n        <p>Stream</p>\r\n    </div>\r\n    <div className=\"sidebar__voiceIcons\">\r\n        <InfoOutlinedIcon/>\r\n        <CallIcon/>\r\n    </div>\r\n</div>\r\n<div className=\"sidebar_profile\">\r\n    <Avatar onClick={()=>{\r\n      auth.signOut() \r\n    }} src={user.photo}/>\r\n    <div className=\"sidebar_profileInfo\">\r\n        <h3>{user.displayName}</h3>\r\n        <p>#{user.uid.substring(0,5)}</p>\r\n    </div>\r\n\r\n    <div className=\"sidebar_profileIcon\">\r\n        <MicIcon/>\r\n        <HeadsetIcon />\r\n        <SettingsIcon />\r\n    </div>\r\n</div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport NotificationsIcon  from \"@material-ui/icons/Notifications\";\r\nimport SendRoundedIcon  from \"@material-ui/icons/SendRounded\";\r\nimport HelpRoundedIcon  from \"@material-ui/icons/HelpRounded\";\r\nimport SearchRoundedIcon  from \"@material-ui/icons/SearchRounded\";\r\nimport React from \"react\";\r\nimport \"./ChatHeader.css\";\r\nfunction ChatHeader({ channelName }) {\r\n  console.log(channelName)\r\n  return (\r\n    <div className=\"chatheader\">\r\n      <div className=\"chatheader__left\">\r\n        <h3>\r\n          <span className=\"chatheader__hash\">#</span>\r\n          {channelName}\r\n          \r\n        </h3>\r\n      </div>\r\n      <div className=\"chatheader__right\">\r\n        <NotificationsIcon />\r\n        <EditLocationRoundedIcon />\r\n        <PeopleAltRoundedIcon />\r\n        <div className=\"chatheader__search\">\r\n            <input type=\"text\" placeholder=\"Search\"/>\r\n            <SearchRoundedIcon />\r\n        </div>\r\n        <SendRoundedIcon />\r\n        <HelpRoundedIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatHeader;\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Message.css'\r\nfunction Message({timestamp,user,message}) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo}/>\r\n            <div className=\"message__info\">\r\n                <h4>\r\n                    {user.displayName}\r\n                    <span className=\"message__timestamp\">\r\n{new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","\r\nimport './ChatBottom.css'\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport TouchAppOutlinedIcon from \"@material-ui/icons/TouchAppOutlined\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport Message from \"./Message\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectuser } from \"./features/userSlice\";\r\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\n\r\n\r\n\r\n\r\nfunction ChatBottom() {\r\n  const user = useSelector(selectuser);\r\n  const channelId = useSelector(selectChannelId);\r\n  const channelName = useSelector(selectChannelName);\r\n  const [input, setinput] = useState(\"\");\r\n  const [messages, setmessages] = useState([]);\r\n  \r\n\r\n  const messagesEndRef = useRef();\r\n\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n      message: input,\r\n      user: user,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    setinput(\"\");\r\n  };\r\n  \r\n    return (\r\n        <div className=\"chat__input\">\r\n        <AddCircleIcon />\r\n        <form>\r\n          <input\r\n            placeholder={`Message #${channelName}`}\r\n            onChange={(e) => setinput(e.target.value)}\r\n            value={input}\r\n            disabled={!channelId}\r\n          />\r\n          <button\r\n            onClick={sendMessage}\r\n            type=\"submit\"\r\n            className=\"chat__inputButton\"\r\n          >\r\n            Send Message\r\n          </button>\r\n        </form>\r\n        <div className=\"chat__inputIcons\">\r\n          <CardGiftcardIcon fontSize=\"large\" />\r\n          <GifIcon fontSize=\"large\" />\r\n          <EmojiEmotionsIcon fontSize=\"large\" />\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBottom\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport TouchAppOutlinedIcon from \"@material-ui/icons/TouchAppOutlined\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport Message from \"./Message\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectuser } from \"./features/userSlice\";\r\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport ChatBottom from './ChatBottom'\r\n\r\nconst getStorageTheme = () => {\r\n  let theme = \"light-theme\";\r\n  if (localStorage.getItem(\"theme\")) {\r\n    theme = localStorage.getItem(\"theme\");\r\n  }\r\n  return theme;\r\n};\r\n\r\nfunction Chat() {\r\n  const user = useSelector(selectuser);\r\n  const channelId = useSelector(selectChannelId);\r\n  const channelName = useSelector(selectChannelName);\r\n  const [input, setinput] = useState(\"\");\r\n  const [messages, setmessages] = useState([]);\r\n  const [theme, setTheme] = useState(getStorageTheme());\r\n\r\n  const messagesEndRef = useRef();\r\n\r\n  useEffect(() => {\r\n    document.documentElement.className = theme;\r\n    localStorage.setItem(\"theme\", theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    if (theme === \"light-theme\") {\r\n      setTheme(\"dark-theme\");\r\n    } else {\r\n      setTheme(\"light-theme\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection(\"channels\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setmessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n}, [channelId]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  console.log(user);\r\n  return (\r\n<div className=\"all\">\r\n      <div className=\"chat\">\r\n      <ChatHeader channelName={channelName} />\r\n      <div className=\"icona\">\r\n        <IconButton style={{ backgroundColor: \"#bbbbbb\" }}>\r\n          <TouchAppOutlinedIcon fontSize=\"large\" onClick={toggleTheme} />\r\n        </IconButton>\r\n      </div>\r\n      <div className=\"chat__message\">\r\n        {messages\r\n          .map((message) => (\r\n              <Message\r\n              message={message.message}\r\n              timestamp={message.timestamp}\r\n              user={message.user}\r\n              />\r\n              ))\r\n              .reverse()}\r\n      </div>\r\n      <div ref={messagesEndRef} />\r\n     \r\n      \r\n    </div>\r\n      <ChatBottom/>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./Login.css\";\r\nimport {auth,provider} from './firebase'\r\nfunction Login() {\r\n\r\nconst signIn=(e)=>\r\n{\r\n\r\nauth.signInWithPopup(provider)\r\n.catch(error=>alert(error.message))\r\n\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__logo\">\r\n        <img src=\"https://www.01net.com/i/0/0/0ec0a8f/2d1e37aac7e9e7f1dbfd007f8.jpg\" />\r\n      </div>\r\n\r\n      <Button onClick={signIn}>sign In</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Chat from './Chat';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login, selectuser,logout } from './features/userSlice';\r\nimport Login from './Login';\r\nimport { auth } from './firebase';\r\nimport { selectChannelId, selectChannelName } from './features/appSlice';\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const user=useSelector(selectuser);\r\n \r\n  \r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(authUser=>{\r\n      console.log(authUser)\r\nif(authUser){\r\ndispatch(\r\n  login({\r\nuid:authUser.uid,\r\nphoto:authUser.photoURL,\r\nemail:authUser.email,\r\ndisplayName:authUser.displayName,\r\n\r\n}))\r\n}else{\r\ndispatch(logout())\r\n}\r\n    })\r\n    \r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"App\">\r\n    {user ? \r\n    (\r\n    <>  \r\n    <Sidebar />\r\n    <Chat />\r\n    \r\n    </>\r\n    ):( <Login/>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n    \r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}